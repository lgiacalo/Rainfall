# Bonus 3
## Résumé
`buf[atoi[argv[1]]] = 0` => comparasion argv[1] avec buf[0] => `execl(/bin/sh)`
## Préambule
```sh
$> ls -l
total 8
-rwsr-s---+ 1 end users 5664 Mar  6  2016 bonus3
$> file bonus3
bonus3: setuid setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0xf71cccc3c27dfb47071bb0bc981e2dae92a47844, not stripped
```
Le home contient un binaire appartenant à l'user `end` et avec un `suid`. On doit donc exploiter ce binaire pour pouvoir accéder au fichier `/home/user/end/.pass`.

On récupère le fichier `bonus2` sur la VM pour le désassembler avec `radare2` :
```sh
$> scp -P 4242 bonus3@10.11.200.192:/home/user/bonus3/bonus3 .
$> r2 bonus3
```


## Analyse
### Analyse du programme

Uniquement la fonction `main` dans ce programme. Celle ci ouvre le fichier "/home/user/end/.pass". Si le retour de la fonction `fopen` est 0 ou quil ny a pas 1 argument alors le programme se termine. 

2 appels a `fread(ptr, .., .., ..) avec ptr = esp+0x18 et ptr = esp+0x18+0x42

Ensuite, un appel de la fonction `atoi` avec argv[1];
Et juste apres, nous voyons cela : 
mov byte [esp + eax + 0x18], 0

Sachant que [esp+0x18] est l'emplacement de pointeur `ptr` rempli par la fonction `fread`.
*(ptr + atoi) = 0

Et enfin, nous voyons une comparaison entre le pointeur ptr et argv[1]
Si celle-ci est correct, on accède au shell.


### Mise en place de l'exploitation
Le but est donc d'avoir une comparaison correcte entre argv[1] et ptr;
Si on met une chaine vide, "". Alors le retour de atoi sera 0. Et donc *ptr = 0.


## Application
```sh
$> ./bonus3 ""
$ cd ../bonus3/
$ cat .pass 
```
